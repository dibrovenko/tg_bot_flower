import asyncio
from datetime import datetime
from pydantic import BaseModel
from typing import List, Optional
import os
import logging

from create_bot import bot
from handlers.client_order_end import estimate_order_start
from parameters import admins, yandex_status, collectors
from yandex.get_courier_phone import get_courier_info

admins_list = [value[0] for value in admins.values()]

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from data_base.sqlite_dp import get_positions_sql, update_positions_sql

py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.DEBUG)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –Ω—É–∂–¥–∞–º–∏
log_file = os.path.join(f"log_directory/{__name__}.log")
py_handler = logging.FileHandler(log_file, mode='w')

# py_handler = logging.FileHandler(f"{__name__}.log", mode='w')
py_formatter = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
py_handler.setFormatter(py_formatter)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
py_logger.addHandler(py_handler)


class VisitedAt(BaseModel):
    expected_waiting_time_sec: int
    actual: Optional[str] = None


class RoutePoint(BaseModel):
    id: int
    type: str
    sharing_link: Optional[str] = None
    visited_at: Optional[VisitedAt]


class PerformerInfo(BaseModel):
    courier_name: str
    legal_name: str


class Claim(BaseModel):
    claim_id: str
    updated_ts: datetime
    status: str
    performer_info: PerformerInfo = None
    route_points: List[RoutePoint]


async def catch_answer_from_yandex(data: dict):
    py_logger.info(data)
    # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
    try:
        update = Claim(**data)
        py_logger.info(update)
    except Exception as e:
        py_logger.error(e)
        return

    # –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    await asyncio.sleep(0.5)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sql_data = await get_positions_sql("status_order", "address", "time_delivery", "courier_name",
                                       "courier_phone", "point_start_delivery", "message_id_client2",
                                       "message_id_collector2", "chat_id_client", "time_delivery_end",
                                       "message_id_client", "message_id_collector", "link_collector", "link_client",
                                       table_name="orders", condition="WHERE number = $1",
                                       condition_value=str(update.claim_id))
    py_logger.info(f"sql_data: {sql_data}")
    if sql_data is not None and sql_data:
        # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —É–∂–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∑–∞–∞: –æ—Ç–º–µ–Ω–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω
        if sql_data[0][0] in ["ourselves", "delivered", "performer_not_found", "estimating_failed", "delivered_finish",
                              "returned_finish", "cancelled_with_payment", "cancelled"]:
            return

        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        if update.status in ["delivered_finish", "delivered", "returned_finish", "cancelled_with_payment", "cancelled"]:
            py_logger.debug("–∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            await estimate_order_start(chat_id_client=sql_data[0][8], order_number=update.claim_id,
                                       message_id_client=sql_data[0][10])

        text = "(‚óï‚Äø‚óï) "
        text += yandex_status[update.status] + "\n"
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–¥ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if sql_data[0][0] != update.status:
            await update_positions_sql(table_name="orders", column_values={"status_order": update.status},
                                       condition=f"WHERE number = '{str(update.claim_id)}'")

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫—É—Ä—å–µ—Ä–æ–º
        if update.performer_info is not None:
            courier_info = await get_courier_info(claim_id=update.claim_id)
            if courier_info["result"]:
                text += "–ö—É—Ä—å–µ—Ä–∞ üìû: " + courier_info["phone"] + "\n"
                text += "–ò–º—è –∫—É—Ä—å–µ—Ä–∞: " + update.performer_info.courier_name + "\n"
                if update.performer_info.courier_name != sql_data[0][3] or courier_info["phone"] != sql_data[0][4]:
                    await update_positions_sql(table_name="orders",
                                               column_values={"courier_name": update.performer_info.courier_name,
                                                              "courier_phone": courier_info["phone"]},
                                               condition=f"WHERE number = '{str(update.claim_id)}'")
            else:
                text += "–ò–º—è –∫—É—Ä—å–µ—Ä–∞: " + update.performer_info.courier_name + "\n"
                if update.performer_info.courier_name != sql_data[0][3]:
                    await update_positions_sql(table_name="orders",
                                               column_values={"courier_name": update.performer_info.courier_name},
                                               condition=f"WHERE number = '{str(update.claim_id)}'")

        # –Ω–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        link_dict = {}
        for route_point in update.route_points:
            link_dict[route_point.type] = route_point.sharing_link
        if link_dict["source"] is None and link_dict["destination"] is None:
            link_client = link_collector = " "
        elif link_dict["destination"] is None:
            link_client = link_collector = link_dict["source"]
        elif link_dict["source"] is None:
            link_client = link_collector = link_dict["destination"]
        else:
            link_client = f'–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {link_dict["destination"]}\n'
            link_collector = f'–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {link_dict["source"]}\n'
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–¥ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if link_client != sql_data[0][0] or link_collector != sql_data[0][0]:
            await update_positions_sql(table_name="orders", column_values={"link_collector": link_collector,
                                                                           "link_client": link_client},
                                       condition=f"WHERE number = '{update.claim_id}'")

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –∫–ª–∏–µ–Ω—Ç—É
        if sql_data[0][6] is None:
            msg = await bot.send_message(chat_id=sql_data[0][8], text=text+link_client,
                                         reply_to_message_id=sql_data[0][10])
            await update_positions_sql(table_name="orders", column_values={"message_id_client2": msg.message_id},
                                       condition=f"WHERE number = '{update.claim_id}'")
        else:
            try:
                await bot.edit_message_text(chat_id=sql_data[0][8], message_id=sql_data[0][6], text=text+link_client)
            except:
                pass

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É —Å–±–æ—Ä—â–∏–∫—É
        if sql_data[0][7] is None:
            msg = await bot.send_message(chat_id=collectors[sql_data[0][5]][0], text=text+link_collector,
                                         reply_to_message_id=sql_data[0][11])
            await update_positions_sql(table_name="orders", column_values={"message_id_collector2": msg.message_id},
                                       condition=f"WHERE number = '{update.claim_id}'")
        else:
            try:
                await bot.edit_message_text(chat_id=collectors[sql_data[0][5]][0], message_id=sql_data[0][7],
                                            text=text+link_collector)
            except:
                pass
