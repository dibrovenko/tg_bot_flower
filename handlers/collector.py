import asyncio
import re

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters import IDFilter
import os

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from create_bot import bot
from data_base.sqlite_dp import get_positions_sql, update_positions_sql
from error_decorators.admin import dec_error_mes, dec_error_mes_state
from handlers.other import set_collectors_commands, delete_messages
from keyboards.collector_kb import kb_collector
from parameters import collectors, admins

import logging

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.DEBUG)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –Ω—É–∂–¥–∞–º–∏
log_file = os.path.join(f"log_directory/{__name__}.log")
py_handler = logging.FileHandler(log_file, mode='w')

# py_handler = logging.FileHandler(f"{__name__}.log", mode='w')
py_formatter = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
py_handler.setFormatter(py_formatter)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
py_logger.addHandler(py_handler)

admins_list = [value[0] for value in admins.values()]
collector_list = [value[0] for value in collectors.values()]


class FSMCFind_order(StatesGroup):
    number_order = State()


def make_shablon_order_text(info_order: list, number_order: str):

    text = f"{info_order[1]} {str(info_order[2])}—à—Ç.\n" \
           f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {info_order[14]}\n" \
           f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {info_order[20]}\n" \
           f"–¢–æ—á–∫–∞ —Å–±–æ—Ä–∫–∏: {info_order[16]}\n" \
           f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {number_order}\n\n" \
           f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–±–æ—Ä—â–∏–∫–∞: {info_order[9]}\n" \
           f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {info_order[10]}\n" \
           f"–í—Ä–µ–º—è –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–µ—Ö–∞—Ç—å –∫—É—Ä—å–µ—Ä: {info_order[8]}\n" \
           f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {info_order[7]}\n" \
           f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {info_order[3]}\n" \
           f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ tg: @{info_order[6]}\n" \
           f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {info_order[4]}\n" \
           f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç: {info_order[5]}\n\n" \
           f"–°–±–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {info_order[11]}\n" \
           f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞: {info_order[12]}\n" \
           f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—å–µ—Ä—É: {info_order[13]}\n" \
           f"–®–∞–≥ —Å–±–æ—Ä–∫–∏: {info_order[15]}\n" \
           f"–¢–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞: {info_order[18]}\n" \
           f"–ò–º—è –∫—É—Ä—å–µ—Ä–∞: {info_order[19]}\n" \
           f"–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {info_order[17]}\n\n " \
           f"‚ùóÔ∏è –ó–¥–µ—Å—å –Ω–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏ –≤ excel —Ç–∞–±–ª–∏—Ü–µ /take_orders_excel"

    return text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîé'
# @dp.message_handler(IDFilter(admins_list, coolector_list), filters.Text(equals='–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîé'), state=None)
@dec_error_mes_state
async def find_order_pressed(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∑–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 'cdbcbea885014164a1f27a60e8d6c153'")
    await FSMCFind_order.number_order.set()
    async with state.proxy() as data:
        data['message_id'] = message.message_id


# –õ–æ–≤–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
#@dp.message_handler(IDFilter(admins_list, collector_list), state=FSMCFind_order.number_order)
@dec_error_mes_state
async def catch_order_number(message: types.Message, state: FSMContext):
    info_order = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                         "phone_client2", "name_tg_client", "address", "time_delivery",
                                         "link_collector", "comment_collector", "way_of_delivery", "link_client",
                                         "comment_courier", "status_order", "step_collector", "point_start_delivery",
                                         "mark", "courier_phone", "courier_name", "full_cost", "img",
                                         table_name="orders",
                                         condition="WHERE number = $1", condition_value=message.text)
    if info_order:
        shablon_order_text = make_shablon_order_text(info_order=info_order[0], number_order=message.text)
        if info_order[0][21] is None:
            await message.answer(text=shablon_order_text)
            py_logger.debug(info_order[0][21])
        else:
            py_logger.debug(f"is not None {info_order[0][21]}")
            await bot.send_photo(chat_id=message.chat.id, photo=info_order[0][21], caption=shablon_order_text)
    else:
        await message.answer(text="–ó–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞'
# @dp.message_handler(IDFilter(admins_list, coolector_list), filters.Text(equals=('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞'))
@dec_error_mes
async def today_tomorrow_order_pressed(message: types.Message):
    condition = None
    if message.text == "–°–µ–≥–æ–¥–Ω—è":
        condition = f"WHERE DATE(time_delivery) = current_date and time_delivery > current_timestamp"
    if message.text == "–ó–∞–≤—Ç—Ä–∞":
        condition = f"WHERE DATE(time_delivery) = current_date + 1"

    if message.chat.id in collector_list:
        for name, data in collectors.items():
            if data[0] == message.chat.id:
                point_start_delivery = name
                condition += f" and point_start_delivery = '{point_start_delivery}'"

    info_orders = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                          "phone_client2", "name_tg_client", "address", "time_delivery",
                                          "link_collector", "comment_collector", "way_of_delivery", "link_client",
                                          "comment_courier", "status_order", "step_collector", "point_start_delivery",
                                          "mark", "courier_phone", "courier_name", "full_cost", "img", "number",
                                          table_name="orders",
                                          condition=condition)
    for info_order in info_orders:
        shablon_order_text = make_shablon_order_text(info_order=info_order, number_order=info_order[22])
        await message.answer(text=shablon_order_text)

    if not info_orders:
        await message.answer(text=f"–∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5'
# @dp.message_handler(IDFilter(admins_list, coolector_list), filters.Text(equals=('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5'))
@dec_error_mes
async def last_5_order_pressed(message: types.Message):
    condition = f"WHERE time_delivery < current_timestamp"

    if message.chat.id in collector_list:
        for name, data in collectors.items():
            if data[0] == message.chat.id:
                point_start_delivery = name
                condition += f" and point_start_delivery = '{point_start_delivery}'"

    condition += f" ORDER BY time_delivery DESC LIMIT 5"
    info_orders = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                          "phone_client2", "name_tg_client", "address", "time_delivery",
                                          "link_collector", "comment_collector", "way_of_delivery", "link_client",
                                          "comment_courier", "status_order", "step_collector", "point_start_delivery",
                                          "mark", "courier_phone", "courier_name", "full_cost", "img", "number",
                                          table_name="orders",
                                          condition=condition)
    for info_order in info_orders:
        shablon_order_text = make_shablon_order_text(info_order=info_order, number_order=info_order[22])
        if info_order[21] is None:
            await message.answer(text=shablon_order_text)
        else:
            await bot.send_photo(chat_id=message.chat.id, photo=info_order[21], caption=shablon_order_text)

    if not info_orders:
        await message.answer(text=f"{message.text}  –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


#@dp.message_handler(commands=['collector'])
async def commands_collector(message: types.Message):
    await set_collectors_commands(message)
    await message.reply('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ —Å–±–æ—Ä—â–∏–∫–∞', reply_markup=kb_collector)


def register_handlers_collector(dp: Dispatcher):
    dp.register_message_handler(commands_collector, IDFilter(collector_list), commands=['collector'])
    dp.register_message_handler(find_order_pressed, IDFilter(collector_list + admins_list),
                                filters.Text(equals='–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üîé'), state=None)
    dp.register_message_handler(catch_order_number, IDFilter(collector_list + admins_list),
                                state=FSMCFind_order.number_order)
    dp.register_message_handler(today_tomorrow_order_pressed, IDFilter(collector_list + admins_list),
                                filters.Text(equals=('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞')))
    dp.register_message_handler(last_5_order_pressed, IDFilter(collector_list + admins_list),
                                filters.Text(equals=('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5')))



