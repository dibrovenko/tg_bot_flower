import asyncio
import re

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import IDFilter
import os

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from create_bot import bot
from data_base.sqlite_dp import get_positions_sql, update_positions_sql
from error_decorators.admin import dec_error_mes, dec_error_mes_state
from handlers.other import set_collectors_commands, delete_messages
from keyboards.collector_kb import kb_collector
from parameters import collectors, admins, dostavista_status, info_start_point, yandex_status

import logging

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from yandex.cancellation_order import cancellation_order

py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.DEBUG)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –Ω—É–∂–¥–∞–º–∏
log_file = os.path.join(f"log_directory/{__name__}.log")
py_handler = logging.FileHandler(log_file, mode='w')

# py_handler = logging.FileHandler(f"{__name__}.log", mode='w')
py_formatter = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
py_handler.setFormatter(py_formatter)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
py_logger.addHandler(py_handler)

admins_list = [value[0] for value in admins.values()]
collector_list = [value[0] for value in collectors.values()]


class FSMCollector(StatesGroup):
    photo_end = State()


class FSMCYandex_wrong(StatesGroup):
    phone = State()
    link = State()


#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('strtclllct '))
@dec_error_mes
async def press_start_collect(callback: types.CallbackQuery):
    await callback.answer()
    await update_positions_sql(table_name="orders", column_values={"step_collector": "start_collect"},
                               condition=f"WHERE number = '{callback.data.split()[1]}'")
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup().add
        (InlineKeyboardButton(f'–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', callback_data=f"flw {callback.data.split()[1]}")).add
        (InlineKeyboardButton(f'–∑–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω üì¶', callback_data=f"ndclllct {callback.data.split()[1]}")))


#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('ndclllct '))
@dec_error_mes
async def press_end_collect(callback: types.CallbackQuery):
    await callback.answer()
    await update_positions_sql(table_name="orders", column_values={"step_collector": "end_collect"},
                               condition=f"WHERE number = '{callback.data.split()[1]}'")
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup().add
        (InlineKeyboardButton(f'–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', callback_data=f"flw {callback.data.split()[1]}")).add
        (InlineKeyboardButton(f'–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç üì∑ü§≥', callback_data=f"tkpht {callback.data.split()[1]}")))


#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('tkpht '), state=None)
@dec_error_mes_state
async def take_photo(callback: types.CallbackQuery, state: FSMContext):
    py_logger.debug("0")
    await callback.answer()
    await update_positions_sql(table_name="orders", column_values={"step_collector": "waiting_photo"},
                               condition=f"WHERE number = '{callback.data.split()[1]}'")
    #await callback.message.edit_media()
    py_logger.debug("1")
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞.")
    await FSMCollector.photo_end.set()
    async with state.proxy() as data:
        data['text'] = callback.message.text
        data['number_order'] = callback.data.split()[1]
    py_logger.debug("2")
    #await callback.message.delete_reply_markup()


# –õ–æ–≤–∏–º —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞
#@dp.message_handler(content_types=['photo'], state=FSMCollector.photo_end)
@dec_error_mes_state
async def load_photo_end(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        order_info = await get_positions_sql("message_id_collector", "message_id_collector2", "status_order",
                                             "courier_name", "courier_phone", "point_start_delivery", "link_collector",
                                             "way_of_delivery", table_name="orders", condition="WHERE number = $1",
                                             condition_value=data['number_order'])
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await bot.delete_message(message_id=order_info[0][0], chat_id=message.chat.id)
            await bot.delete_message(message_id=order_info[0][1], chat_id=message.chat.id)
        except Exception:
            pass
        try:
            await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
            await bot.delete_message(message_id=message.message_id - 1, chat_id=message.chat.id)
        except Exception:
            pass
        msg = await message.answer_photo(photo=message.photo[0].file_id,
                                         caption="–ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω ‚úÖ\n" + '\n'.join(data['text'].splitlines()[1:]))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –∞–¥–º–∏–Ω–∞–º
        global admins_list
        for chat_id in admins_list:
            await bot.send_photo(chat_id=chat_id, photo=message.photo[0].file_id,
                                 caption=f"–ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω ‚úÖ\n –ù–æ–º–µ—Ä: {data['number_order']}"
                                         f"\n–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {order_info[0][5]}")
        text2 = "(‚óï‚Äø‚óï) "
        py_logger.debug(f"sql_data load_photo_end {order_info}")
        if order_info[0][-1] == "Express":
            text2 += yandex_status[order_info[0][2]] + "\n"
            text2 += "–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É : " + str(order_info[0][-2]) + "\n"
        else:
            try:
                text2 += dostavista_status["Delivery"][order_info[0][2]] + "\n"
            except:
                text2 += dostavista_status["Order"][order_info[0][2]] + "\n"

        if order_info[0][4] is not None:
            text2 += "–ö—É—Ä—å–µ—Ä–∞ üìû: " + str(order_info[0][4]) + "\n"
        if order_info[0][3] is not None:
            text2 += "–ò–º—è –∫—É—Ä—å–µ—Ä–∞ : " + str(order_info[0][3]) + "\n"

        msg2 = await msg.reply(text=text2)
        await update_positions_sql(table_name="orders", column_values={"step_collector": "end_with_photo",
                                                                       "img": message.photo[0].file_id,
                                                                       "message_id_collector": msg.message_id,
                                                                       "message_id_collector2": msg2.message_id},
                                   condition=f"WHERE number = '{data['number_order']}'")
    await state.finish()


#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('flw '))
@dec_error_mes
async def commands_show_flower(callback: types.CallbackQuery):
    await callback.answer("–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–µ—Ç")
    flower_info = await get_positions_sql("goods.img", "goods.name", "goods.name_english", "goods.category",
                                          "goods.subcategory", "goods.description", "goods.price", table_name="goods",
                                          condition=f"INNER JOIN orders ON goods.name = orders.name "
                                                    f"WHERE orders.number = $1",
                                          condition_value=callback.data.split()[1])
    py_logger.info(f"commands_show_flower flower_info: {flower_info}")
    if flower_info:
        try:
            for ret in flower_info:
                caption = f'*{ret[1]}*\n_English_: *{ret[2]}*\n_–ö–∞—Ç–µ–≥–æ—Ä–∏—è:_ *{ret[3]}*\n_–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:_ *{ret[4]}*\n_' \
                          f'–û–ø–∏—Å–∞–Ω–∏–µ:_ *{ret[5]}*\n_–¶–µ–Ω–∞_ *{ret[-1]}*'
                album = types.MediaGroup()
                matches = re.findall(r"'(.*?)'", ret[0])
                for i, match in enumerate(matches):
                    if i == len(matches) - 1:
                        album.attach_photo(photo=match, caption=caption, parse_mode="Markdown")
                    else:
                        album.attach_photo(photo=match)
                msg = await callback.message.answer_media_group(media=album)
                await asyncio.sleep(100)
                for message in msg:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            py_logger.error(f"commands_show_flower: {e}")
            await callback.message.answer("–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ")
    else:
        await callback.message.answer("–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ")


async def start_colllect(chat_id: int, number_order: str):
    last_order = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                         "phone_client2", "name_tg_client", "address", "time_delivery",
                                         "link_collector", "comment_collector", table_name="orders",
                                         condition="WHERE number = $1", condition_value=number_order)
    if last_order:
        msg = await bot.send_message(
            chat_id=chat_id,
            text=f"–ö—É—Ä—å–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å!\n"
                 f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {number_order}\n"
                 f"{last_order[0][1]} {str(last_order[0][2])}—à—Ç.\n"
                 f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {last_order[0][9]}\n"
                 f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {last_order[0][10]}\n"
                 f"–í—Ä–µ–º—è –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–µ—Ö–∞—Ç—å –∫—É—Ä—å–µ—Ä: {last_order[0][8]}\n"
                 f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {last_order[0][7]}\n"
                 f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {last_order[0][3]}\n"
                 f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ tg: @{last_order[0][6]}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {last_order[0][4]}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç: {last_order[0][5]}",
            reply_markup=InlineKeyboardMarkup().add
            (InlineKeyboardButton(f'–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', callback_data=f"flw {number_order}")).add
            (InlineKeyboardButton(f'–Ω–∞—á–∞–ª —Å–æ–±–∏—Ä–∞—Ç—å üì¶', callback_data=f"strtclllct {number_order}"))
        )
        await bot.pin_chat_message(chat_id=msg.chat.id, message_id=msg.message_id)
        await update_positions_sql(table_name="orders", column_values={"message_id_collector": msg.message_id},
                                   condition=f"WHERE number = '{number_order}'")
        asyncio.create_task(control_step_collect(chat_id=chat_id, number_order=number_order))

    else:
        py_logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—Ç–∞—â–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ {number_order}")


async def control_step_collect(chat_id: int, number_order: str, time=3000):
    py_logger.debug("control_step_collect start")
    await asyncio.sleep(time)
    step = await get_positions_sql("step_collector", table_name="orders",
                                   condition="WHERE number = $1", condition_value=number_order)
    py_logger.debug(step[0][0])

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –∫—É—Ä—å–µ—Ä–∞
    if step[0][0] == "waiting":
        await bot.send_message(chat_id=chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞—é, –≤—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑: {number_order}")
    await asyncio.sleep(300)
    step = await get_positions_sql("step_collector", "point_start_delivery", table_name="orders",
                                   condition="WHERE number = $1", condition_value=number_order)
    if step[0][0] == "waiting":    #—É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        for chat_id_admin in admins_list:
            await bot.send_message(chat_id=chat_id_admin,
                                   text=f"–ù–∞ —Ç–æ—á–∫–µ {step[0][1]}, —Å–±–æ—Ä—â–∏–∫ –Ω–µ –Ω–∞—á–∞–ª —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: {number_order}")

    await asyncio.sleep(300)
    step = await get_positions_sql("step_collector", table_name="orders",
                                   condition="WHERE number = $1", condition_value=number_order)
    py_logger.debug(step[0][0])
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–æ–Ω—á–∏–ª –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø—Ä—è–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–±—ã—Ç–∏–µ–º –∫—É—Ä—å–µ—Ä–∞
    if step[0][0] == "start_collect" or step[0][0] == "waiting":
        await bot.send_message(chat_id=chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞—é, –≤—ã –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑: {number_order}")
    await asyncio.sleep(200)
    py_logger.debug("await asyncio.sleep(20)")
    step = await get_positions_sql("step_collector", "point_start_delivery", table_name="orders",
                                   condition="WHERE number = $1", condition_value=number_order)
    if step[0][0] == "start_collect" or step[0][0] == "waiting":   #—É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        for chat_id_admin in admins_list:
            await bot.send_message(chat_id=chat_id_admin,
                                   text=f"–ù–∞ —Ç–æ—á–∫–µ {step[0][1]}, —Å–±–æ—Ä—â–∏–∫ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–ª –∑–∞–∫–∞–∑: {number_order}")


async def start_colllect_yandex(chat_id: int, number_order: str):
    last_order = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                         "phone_client2", "name_tg_client", "address", "time_delivery",
                                         "link_collector", "comment_collector", table_name="orders",
                                         condition="WHERE number = $1", condition_value=number_order)
    if last_order:
        msg = await bot.send_message(
            chat_id=chat_id,
            text=f"‚ö°Ô∏èExpress –∑–∞–∫–∞–∑!\n"
                 f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {number_order}\n"
                 f"{last_order[0][1]} {str(last_order[0][2])}—à—Ç.\n"
                 f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {last_order[0][10]}\n"
                 f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è\n"
                 f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {last_order[0][7]}\n"
                 f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {last_order[0][3]}\n"
                 f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ tg: @{last_order[0][6]}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {last_order[0][4]}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç: {last_order[0][5]}",
            reply_markup=InlineKeyboardMarkup().add
            (InlineKeyboardButton(f'–ø–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç', callback_data=f"flw {number_order}")).add
            (InlineKeyboardButton(f'–Ω–∞—á–∞–ª —Å–æ–±–∏—Ä–∞—Ç—å üì¶', callback_data=f"strtclllct {number_order}"))
        )
        await bot.pin_chat_message(chat_id=msg.chat.id, message_id=msg.message_id)
        await update_positions_sql(table_name="orders", column_values={"message_id_collector": msg.message_id},
                                   condition=f"WHERE number = '{number_order}'")
        asyncio.create_task(control_step_collect(chat_id=chat_id, number_order=number_order, time=450))
        #asyncio.create_task(control_step_yandex(number_order=number_order))

    else:
        py_logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—Ç–∞—â–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ {number_order}")


async def control_step_yandex(number_order: str):
    await asyncio.sleep(720)
    last_order = await get_positions_sql("name_english", "name", "quantity", "name_client", "phone_client",
                                         "phone_client2", "name_tg_client", "address", "time_delivery",
                                         "link_collector", "comment_collector", "point_start_delivery",
                                         table_name="orders", condition="WHERE number = $1",
                                         condition_value=number_order)
    py_logger.debug(f"control_step_yandex url: {last_order[0][9]}")
    if last_order[0][9] is None:
        await cancellation_order(id=number_order)
        text_problem = f"–ù–µ –Ω–∞—à–ª–æ—Å—å –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è ‚ö°Ô∏èExpress –∑–∞–∫–∞–∑–∞! –ó–∞–∫–∞–∂–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ —Å–∞–º–∏, –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ," \
                       f" –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'\n"\
                       f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {number_order}\n"\
                       f"{last_order[0][1]} {str(last_order[0][2])}—à—Ç.\n"\
                       f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {last_order[0][7]}\n"\
                       f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç: {last_order[0][5]}\n" \
                       f"–¢–µ–ª–µ—Ñ–æ–Ω —Ç–æ—á–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞: {info_start_point[last_order[0][-1]]['phone']}"

        for chat_id in admins_list:
            await bot.send_message(chat_id=chat_id, text=text_problem, reply_markup=InlineKeyboardMarkup().
                                   add(InlineKeyboardButton(f'–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
                                                            callback_data=f"cntrl_ndx {number_order}")))


#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('cntrl_ndx '))
@dec_error_mes_state
async def yandex_wrong_start(callback: types.CallbackQuery, state: FSMContext):
    await FSMCYandex_wrong.phone.set()
    async with state.proxy() as data:
        data["start_message_id"] = callback.message.message_id
        data['number'] = callback.data.split()[1]
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ –Ω–æ–º–µ—Ä –∫—É—Ä—å–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79161052259")


# –õ–æ–≤–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞
#@dp.message_handler(state=FSMCYandex_wrong.phone)
@dec_error_mes_state
async def yandex_wrong_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
    await FSMCYandex_wrong.link.set()


# –õ–æ–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
#@dp.message_handler(state=FSMCYandex_wrong.link)
@dec_error_mes_state
async def yandex_wrong_link(message: types.Message, state: FSMContext):
    msg = await message.answer("–°–ø–∞—Å–∏–±–æ")
    async with state.proxy() as data:
        data['link'] = message.text
        asyncio.create_task(
            delete_messages(message.chat.id, data['start_message_id'], msg.message_id + 1, 4, 0))
        sql_data = await get_positions_sql("message_id_client2", "message_id_collector2", "chat_id_client",
                                           "message_id_client", "message_id_collector", "point_start_delivery",
                                           table_name="orders", condition="WHERE number = $1",
                                           condition_value=data['number'])
        text = "(‚óï‚Äø‚óï) –ö—É—Ä—å–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞ —Ü–≤–µ—Ç–∞–º–∏!\n"
        text += "–ö—É—Ä—å–µ—Ä–∞ üìû: " + data['phone'] + "\n"
        text += "–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É : " + data['link'] + "\n"
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –∫–ª–∏–µ–Ω—Ç—É
        if sql_data[0][0] is None:
            msg = await bot.send_message(chat_id=sql_data[0][2], text=text, reply_to_message_id=sql_data[0][3])
            await update_positions_sql(table_name="orders",
                                       column_values={"message_id_client2": msg.message_id},
                                       condition=f"WHERE number = '{data['number']}'")
        else:
            try:
                await bot.edit_message_text(chat_id=sql_data[0][2], message_id=sql_data[0][0], text=text)
            except:
                pass

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É —Å–±–æ—Ä—â–∏–∫—É
        if sql_data[0][1] is None:
            msg = await bot.send_message(chat_id=collectors[sql_data[0][5]][0], text=text,
                                         reply_to_message_id=sql_data[0][4])
            await update_positions_sql(table_name="orders",
                                       column_values={"message_id_collector2": msg.message_id},
                                       condition=f"WHERE number = '{data['number']}'")
        else:
            try:
                await bot.edit_message_text(chat_id=collectors[sql_data[0][5]][0], message_id=sql_data[0][1],
                                            text=text)
            except:
                pass

        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ(—Å—Å—ã–ª–∫—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
        await update_positions_sql(table_name="orders",
                                   column_values={"link_collector": data['link'], "link_client": data['link'],
                                                  "courier_phone": data['phone']},
                                   condition=f"WHERE number = '{data['number']}'")
    await state.finish()


#@dp.message_handler(commands=['collector'])
async def commands_collector(message: types.Message):
    await set_collectors_commands(message)
    await message.reply('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ —Å–±–æ—Ä—â–∏–∫–∞', reply_markup=kb_collector)


def register_handlers_collector(dp: Dispatcher):
    dp.register_message_handler(commands_collector, IDFilter(collector_list), commands=['collector'])
    dp.register_callback_query_handler(commands_show_flower, IDFilter(collector_list),
                                       lambda x: x.data and x.data.startswith('flw '))
    dp.register_callback_query_handler(press_start_collect, IDFilter(collector_list),
                                       lambda x: x.data and x.data.startswith('strtclllct '))
    dp.register_callback_query_handler(press_end_collect, IDFilter(collector_list),
                                       lambda x: x.data and x.data.startswith('ndclllct '))
    dp.register_callback_query_handler(take_photo, IDFilter(collector_list),
                                       lambda x: x.data and x.data.startswith('tkpht '), state=None)
    dp.register_message_handler(load_photo_end, content_types=['photo'], state=FSMCollector.photo_end)
    dp.register_callback_query_handler(yandex_wrong_start, IDFilter(admins_list),
                                       lambda x: x.data and x.data.startswith('cntrl_ndx '), state=None)
    dp.register_message_handler(yandex_wrong_phone, IDFilter(admins_list), state=FSMCYandex_wrong.phone)
    dp.register_message_handler(yandex_wrong_link, IDFilter(admins_list), state=FSMCYandex_wrong.link)

